// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file monitoring/v1/service.proto (package monitoring.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import {
  GetMetricSummaryRequest,
  GetMetricSummaryResponse,
  QueryRequest,
  QueryResponse,
  StreamLogsRequest,
  StreamMetricsRequest,
} from './service_pb.js';
import { MethodKind } from '@bufbuild/protobuf';
import { MetricData } from './metrics_pb.js';
import { LogEntry } from './logs_pb.js';

/**
 * モニタリングサービス
 *
 * @generated from service monitoring.v1.MonitoringService
 */
export const MonitoringService = {
  typeName: 'monitoring.v1.MonitoringService',
  methods: {
    /**
     * Unary RPC: メトリクスサマリーの取得
     *
     * @generated from rpc monitoring.v1.MonitoringService.GetMetricSummary
     */
    getMetricSummary: {
      name: 'GetMetricSummary',
      I: GetMetricSummaryRequest,
      O: GetMetricSummaryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Server Streaming RPC: メトリクスのストリーミング
     *
     * @generated from rpc monitoring.v1.MonitoringService.StreamMetrics
     */
    streamMetrics: {
      name: 'StreamMetrics',
      I: StreamMetricsRequest,
      O: MetricData,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Server Streaming RPC: ログのストリーミング
     *
     * @generated from rpc monitoring.v1.MonitoringService.StreamLogs
     */
    streamLogs: {
      name: 'StreamLogs',
      I: StreamLogsRequest,
      O: LogEntry,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Bidirectional Streaming RPC: インタラクティブクエリ
     *
     * @generated from rpc monitoring.v1.MonitoringService.InteractiveQuery
     */
    interactiveQuery: {
      name: 'InteractiveQuery',
      I: QueryRequest,
      O: QueryResponse,
      kind: MethodKind.BiDiStreaming,
    },
  },
} as const;
